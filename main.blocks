<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable type="KIND_SpriteKind" id="I/o~3WArwE~w9hXBqZ);">Player</variable><variable type="KIND_SpriteKind" id="iGn|o`N0bM_20%-d4uyi">Projectile</variable><variable type="KIND_SpriteKind" id="{qA9X|o2;sfl]}/cfY|`">Food</variable><variable type="KIND_SpriteKind" id="E.{eej!TeFD%;Sj/+K6i">Enemy</variable></variables><block type="pxt-on-start" id="yPMlyU[Bew6Iei67qM.7" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="YG30rnM~t^Y*Wof+3iRr" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace behavior {" line1="" line2="    export interface Behavior {" line3="        sprite : Sprite;" line4="        target : Sprite;" line5="        update() : boolean ;" line6="    }" line7="" line8="    export enum MovePattern {" line9="        Bounce," line10="        TurnIfOnWall," line11="        BounceAndTurnOnSideWall," line12="        FlyAndTurnOnSideWall," line13="    }" line14="" line15="    class MoverBehavior implements Behavior {" line16="        _sprite: Sprite;" line17="        _vx: number;" line18="        _vy: number;" line19="        constructor(sprite: Sprite, vx: number, vy: number) {" line20="            this._sprite = sprite;" line21="            this._sprite.vx = this._vx = Math.abs(vx);" line22="            this._sprite.vy = this._vy = Math.abs(vy);" line23="        }" line24="        get sprite() : Sprite {" line25="            return this._sprite;" line26="        }" line27="        get target() : Sprite {" line28="            return null;" line29="        }" line30="        update() : boolean {" line31="            return false;" line32="        }" line33="        moveRight() {" line34="            this._sprite.vx = this._vx;" line35="        }" line36="        moveLeft() {" line37="            this._sprite.vx = this._vx * -1;" line38="        }" line39="        protected _fall() {" line40="            let vy = this._sprite.vy;" line41="            this._sprite.vy = Math.min(vy+8, this._vy);" line42="        }" line43="        protected _jumpIfOnGround() : boolean {" line44="            if (this._sprite.isHittingTile(CollisionDirection.Bottom)) {" line45="                this._sprite.vy = this._vy * -1;" line46="                return true;" line47="            }" line48="            return false;" line49="        }" line50="        protected _ternIfOnWall() : boolean {" line51="            if (this._sprite.isHittingTile(CollisionDirection.Left)) {" line52="                this.moveRight();" line53="                return true;" line54="            } else if (this._sprite.isHittingTile(CollisionDirection.Right)) {" line55="                this.moveLeft();" line56="                return true;" line57="            }" line58="            return false;" line59="        }" line60="    }" line61="" line62="    class BounceBehavior extends MoverBehavior {" line63="        constructor(sprite: Sprite) {" line64="            super(sprite, 0, 120);" line65="        }" line66="        update() : boolean {" line67="            this._fall();" line68="            return this._jumpIfOnGround();" line69="        }" line70="    }" line71="" line72="    class TurnIfOnWallBehavior extends MoverBehavior {" line73="        constructor(sprite: Sprite) {" line74="            super(sprite, 50, 200);" line75="        }" line76="        update() : boolean {" line77="            this._fall();" line78="            this._ternIfOnWall();" line79="            return true;    // always true" line80="        }" line81="    }" line82="" line83="    class BounceAndTurnOnSideWallBehavior extends MoverBehavior {" line84="        constructor(sprite: Sprite) {" line85="            super(sprite, 50, 200);" line86="        }" line87="        update() : boolean {" line88="            this._fall();" line89="" line90="            if( this._jumpIfOnGround() ) {" line91="                return true;" line92="            }" line93="            " line94="            if( this._ternIfOnWall() ) {" line95="                return true;" line96="            }" line97="" line98="            return false;" line99="        }" line100="    }" line101="" line102="    class FlyAndTurnOnSideWallBehavior extends MoverBehavior {" line103="        constructor(sprite: Sprite) {" line104="            super(sprite, 50, 0);" line105="        }" line106="        update() : boolean {" line107="            return this._ternIfOnWall();" line108="        }" line109="    }" line110="" line111="    class ChaserBehavior implements Behavior {" line112="        _mover: MoverBehavior" line113="        _target: Sprite;" line114="        constructor(mover: MoverBehavior, target: Sprite) {" line115="            this._mover = mover;" line116="            this._target = target;" line117="        }" line118="        get sprite() {" line119="            return this._mover.sprite;" line120="        }" line121="        get target() : Sprite {" line122="            return this._target;" line123="        }" line124="        update() : boolean {" line125="            if( !this._mover.update() )" line126="                return false;" line127="" line128="            if( this._target.x &lt; this._mover.sprite.x ) {" line129="                this._mover.moveLeft();" line130="            } else if( this._mover.sprite.x &lt; this._target.x ) {" line131="                this._mover.moveRight();" line132="            }" line133="" line134="            return true;" line135="        }" line136="    }" line137="" line138="    class GunnerBehavior implements Behavior {" line139="        _mover: MoverBehavior" line140="        _target: Sprite;" line141="        constructor(mover: MoverBehavior, target: Sprite) {" line142="            this._mover = mover;" line143="            this._target = target;" line144="        }" line145="        get sprite() {" line146="            return this._mover.sprite;" line147="        }" line148="        get target() : Sprite {" line149="            return this._target;" line150="        }" line151="        update() : boolean {" line152="            if( !this._mover.update() )" line153="                return false;" line154="" line155="            if( this._target.x &lt; this._mover.sprite.x ) {" line156="                this._mover.moveLeft();" line157="            } else if( this._mover.sprite.x &lt; this._target.x ) {" line158="                this._mover.moveRight();" line159="            }" line160="" line161="            return true;" line162="        }" line163="    }" line164="" line165="" line166="    class Item {" line167="        sprite:Sprite;" line168="        value:Behavior;" line169="    }" line170="" line171="    let _items: Item[] = [];" line172="    game.onUpdate(() =&gt; {" line173="        for(let item of _items) {" line174="            item.value.update();" line175="        }" line176="    })" line177="" line178="    //% block=&quot;set $pattern pattern of $sprite=variables_get(aEnemy)&quot;" line179="    export function setPattern(sprite: Sprite, pattern: MovePattern) {" line180="        let _behavior = _createBehavior(sprite, pattern);" line181="        if( !_behavior )" line182="            return;" line183="" line184="        sprite.setFlag(SpriteFlag.StayInScreen, false);" line185="" line186="        let item2 = new Item();" line187="        item2.sprite = sprite;" line188="        item2.value = _behavior;" line189="        _addItem(item2);" line190="    }" line191="" line192="    //% block=&quot;set $sprite=variables_get(aEnemy) to follow $target=variables_get(mySprite)&quot;" line193="    export function setFollower(sprite: Sprite, target: Sprite) {" line194="        let _item = _findItemBySprite(sprite);" line195="        if( !_item )" line196="            return;" line197="" line198="        _item.value = new ChaserBehavior(_item.value as MoverBehavior, target);" line199="    }" line200="" line201="    function _addItem(item: Item) {" line202="        item.sprite.onDestroyed(() =&gt; {" line203="            let _item2 = _findItemBySprite(item.sprite);" line204="            _items.removeElement(_item2);" line205="        });" line206="        _items.push(item);" line207="        console.log(&quot;_items.length:&quot; + _items.length);" line208="    }" line209="" line210="    function _findItemBySprite(sprite:Sprite) {" line211="        let found = _items.find((_item: Item, index: number) =&gt; {" line212="            return _item.sprite == sprite;" line213="        });" line214="        if( found == undefined || found == null)" line215="            return null" line216="        return found;" line217="    }" line218="" line219="    function _createBehavior(sprite: Sprite, pattern: MovePattern) : Behavior {" line220="        switch(pattern) {" line221="        case MovePattern.Bounce:" line222="            return new BounceBehavior(sprite);" line223="        case MovePattern.TurnIfOnWall:" line224="            return new TurnIfOnWallBehavior(sprite);" line225="        case MovePattern.BounceAndTurnOnSideWall:" line226="            return new BounceAndTurnOnSideWallBehavior(sprite);" line227="        case MovePattern.FlyAndTurnOnSideWall:" line228="            return new FlyAndTurnOnSideWallBehavior(sprite);" line229="        default:" line230="            return null;" line231="        }" line232="    }" line233="" line234="}" numlines="235"></mutation></block></statement></block><block type="function_definition" id="?jr=+_h_*ArOtO#wFWQ_" x="930" y="0"><mutation name="_createBullet" functionid="4JUuMj{(shZlpiXETKCG"/><field name="function_name">_createBullet</field><statement name="STACK"><block type="function_return" id="9FQU{F:g@JOz6q4[0W#y"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="spritescreate" id="e8pj.f+h.Nf4VJ_M2k]E"><value name="img"><shadow type="screen_image_picker" id="hxsH{2_#L@b#U_8S]%~$"><field name="img">img`
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 . . . . . . . . . . . . 3 3 
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
`</field><data>{"commentRefs":[],"fieldData":{"img":null}}</data></shadow></value><value name="kind"><shadow type="spritekind" id="k.kofQ=h-Y/zTY/RIUQ."><field name="MEMBER">Projectile</field></shadow></value></block></value></block></statement></block></xml>